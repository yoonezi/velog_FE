{"ast":null,"code":"import { dequal } from 'dequal';\n\n/**\n * @type {Set<string>}\n */\nconst codesWarned = new Set();\nclass AssertionError extends Error {\n  name = /** @type {const} */'Assertion';\n  code = /** @type {const} */'ERR_ASSERTION';\n\n  /**\n   * Create an assertion error.\n   *\n   * @param {string} message\n   *   Message explaining error.\n   * @param {unknown} actual\n   *   Value.\n   * @param {unknown} expected\n   *   Baseline.\n   * @param {string} operator\n   *   Name of equality operation.\n   * @param {boolean} generated\n   *   Whether `message` is a custom message or not\n   * @returns\n   *   Instance.\n   */\n  // eslint-disable-next-line max-params\n  constructor(message, actual, expected, operator, generated) {\n    super(message);\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    /**\n     * @type {unknown}\n     */\n    this.actual = actual;\n\n    /**\n     * @type {unknown}\n     */\n    this.expected = expected;\n\n    /**\n     * @type {boolean}\n     */\n    this.generated = generated;\n\n    /**\n     * @type {string}\n     */\n    this.operator = operator;\n  }\n}\nclass DeprecationError extends Error {\n  name = /** @type {const} */'DeprecationWarning';\n\n  /**\n   * Create a deprecation message.\n   *\n   * @param {string} message\n   *   Message explaining deprecation.\n   * @param {string | undefined} code\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\n   * @returns\n   *   Instance.\n   */\n  constructor(message, code) {\n    super(message);\n\n    /**\n     * @type {string | undefined}\n     */\n    this.code = code;\n  }\n}\n\n/**\n * Wrap a function or class to show a deprecation message when first called.\n *\n * > ðŸ‘‰ **Important**: only shows a message when the `development` condition is\n * > used, does nothing in production.\n *\n * When the resulting wrapped `fn` is called, emits a warning once to\n * `console.error` (`stderr`).\n * If a code is given, one warning message will be emitted in total per code.\n *\n * @template {Function} T\n *   Function or class kind.\n * @param {T} fn\n *   Function or class.\n * @param {string} message\n *   Message explaining deprecation.\n * @param {string | null | undefined} [code]\n *   Deprecation identifier (optional); deprecation messages will be generated\n *   only once per code.\n * @returns {T}\n *   Wrapped `fn`.\n */\nexport function deprecate(fn, message, code) {\n  let warned = false;\n\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn);\n\n  // @ts-expect-error: itâ€™s perfect, typescriptâ€¦\n  return deprecated;\n\n  /**\n   * @this {unknown}\n   * @param  {...Array<unknown>} args\n   * @returns {unknown}\n   */\n  function deprecated() {\n    if (!warned) {\n      warned = true;\n      if (typeof code === 'string' && codesWarned.has(code)) {\n        // Empty.\n      } else {\n        console.error(new DeprecationError(message, code || undefined));\n        if (typeof code === 'string') codesWarned.add(code);\n      }\n    }\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new.target ? Reflect.construct(fn, args, new.target) : Reflect.apply(fn, this, args);\n  }\n}\n\n/**\n * Assert deep strict equivalence.\n *\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @template {unknown} T\n *   Expected kind.\n * @param {unknown} actual\n *   Value.\n * @param {T} expected\n *   Baseline.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\n * @returns {asserts actual is T}\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\n * @throws {AssertionError}\n *   Throws when `actual` is not deep strict equal to `expected`.\n */\nexport function equal(actual, expected, message) {\n  assert(dequal(actual, expected), actual, expected, 'equal', 'Expected values to be deeply equal', message);\n}\n\n/**\n * Assert if `value` is truthy.\n *\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {unknown} value\n *   Value to assert.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected value to be truthy'`).\n * @returns {asserts value}\n *   Nothing; throws when `value` is falsey.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */\nexport function ok(value, message) {\n  assert(Boolean(value), false, true, 'ok', 'Expected value to be truthy', message);\n}\n\n/**\n * Assert that a code path never happens.\n *\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Unreachable'`).\n * @returns {never}\n *   Nothing; always throws.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */\nexport function unreachable(message) {\n  assert(false, false, true, 'ok', 'Unreachable', message);\n}\n\n/**\n * @param {boolean} bool\n *   Whether to skip this operation.\n * @param {unknown} actual\n *   Actual value.\n * @param {unknown} expected\n *   Expected value.\n * @param {string} operator\n *   Operator.\n * @param {string} defaultMessage\n *   Default message for operation.\n * @param {Error | string | null | undefined} userMessage\n *   User-provided message.\n * @returns {asserts bool}\n *   Nothing; throws when falsey.\n */\n// eslint-disable-next-line max-params\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\n  if (!bool) {\n    throw userMessage instanceof Error ? userMessage : new AssertionError(userMessage || defaultMessage, actual, expected, operator, !userMessage);\n  }\n}","map":{"version":3,"names":["dequal","codesWarned","Set","AssertionError","Error","name","code","constructor","message","actual","expected","operator","generated","captureStackTrace","DeprecationError","deprecate","fn","warned","Object","setPrototypeOf","deprecated","has","console","error","undefined","add","_len","arguments","length","args","Array","_key","new","target","Reflect","construct","apply","equal","assert","ok","value","Boolean","unreachable","bool","defaultMessage","userMessage"],"sources":["/Users/yoonezi/Documents/fe/Kurly á„‡á…©á†¨á„‰á…¡á„‡á…©á†«/node_modules/devlop/lib/development.js"],"sourcesContent":["import {dequal} from 'dequal'\n\n/**\n * @type {Set<string>}\n */\nconst codesWarned = new Set()\n\nclass AssertionError extends Error {\n  name = /** @type {const} */ ('Assertion')\n  code = /** @type {const} */ ('ERR_ASSERTION')\n\n  /**\n   * Create an assertion error.\n   *\n   * @param {string} message\n   *   Message explaining error.\n   * @param {unknown} actual\n   *   Value.\n   * @param {unknown} expected\n   *   Baseline.\n   * @param {string} operator\n   *   Name of equality operation.\n   * @param {boolean} generated\n   *   Whether `message` is a custom message or not\n   * @returns\n   *   Instance.\n   */\n  // eslint-disable-next-line max-params\n  constructor(message, actual, expected, operator, generated) {\n    super(message)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    }\n\n    /**\n     * @type {unknown}\n     */\n    this.actual = actual\n\n    /**\n     * @type {unknown}\n     */\n    this.expected = expected\n\n    /**\n     * @type {boolean}\n     */\n    this.generated = generated\n\n    /**\n     * @type {string}\n     */\n    this.operator = operator\n  }\n}\n\nclass DeprecationError extends Error {\n  name = /** @type {const} */ ('DeprecationWarning')\n\n  /**\n   * Create a deprecation message.\n   *\n   * @param {string} message\n   *   Message explaining deprecation.\n   * @param {string | undefined} code\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\n   * @returns\n   *   Instance.\n   */\n  constructor(message, code) {\n    super(message)\n\n    /**\n     * @type {string | undefined}\n     */\n    this.code = code\n  }\n}\n\n/**\n * Wrap a function or class to show a deprecation message when first called.\n *\n * > ðŸ‘‰ **Important**: only shows a message when the `development` condition is\n * > used, does nothing in production.\n *\n * When the resulting wrapped `fn` is called, emits a warning once to\n * `console.error` (`stderr`).\n * If a code is given, one warning message will be emitted in total per code.\n *\n * @template {Function} T\n *   Function or class kind.\n * @param {T} fn\n *   Function or class.\n * @param {string} message\n *   Message explaining deprecation.\n * @param {string | null | undefined} [code]\n *   Deprecation identifier (optional); deprecation messages will be generated\n *   only once per code.\n * @returns {T}\n *   Wrapped `fn`.\n */\nexport function deprecate(fn, message, code) {\n  let warned = false\n\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn)\n\n  // @ts-expect-error: itâ€™s perfect, typescriptâ€¦\n  return deprecated\n\n  /**\n   * @this {unknown}\n   * @param  {...Array<unknown>} args\n   * @returns {unknown}\n   */\n  function deprecated(...args) {\n    if (!warned) {\n      warned = true\n\n      if (typeof code === 'string' && codesWarned.has(code)) {\n        // Empty.\n      } else {\n        console.error(new DeprecationError(message, code || undefined))\n\n        if (typeof code === 'string') codesWarned.add(code)\n      }\n    }\n\n    return new.target\n      ? Reflect.construct(fn, args, new.target)\n      : Reflect.apply(fn, this, args)\n  }\n}\n\n/**\n * Assert deep strict equivalence.\n *\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @template {unknown} T\n *   Expected kind.\n * @param {unknown} actual\n *   Value.\n * @param {T} expected\n *   Baseline.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\n * @returns {asserts actual is T}\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\n * @throws {AssertionError}\n *   Throws when `actual` is not deep strict equal to `expected`.\n */\nexport function equal(actual, expected, message) {\n  assert(\n    dequal(actual, expected),\n    actual,\n    expected,\n    'equal',\n    'Expected values to be deeply equal',\n    message\n  )\n}\n\n/**\n * Assert if `value` is truthy.\n *\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {unknown} value\n *   Value to assert.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected value to be truthy'`).\n * @returns {asserts value}\n *   Nothing; throws when `value` is falsey.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */\nexport function ok(value, message) {\n  assert(\n    Boolean(value),\n    false,\n    true,\n    'ok',\n    'Expected value to be truthy',\n    message\n  )\n}\n\n/**\n * Assert that a code path never happens.\n *\n * > ðŸ‘‰ **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Unreachable'`).\n * @returns {never}\n *   Nothing; always throws.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */\nexport function unreachable(message) {\n  assert(false, false, true, 'ok', 'Unreachable', message)\n}\n\n/**\n * @param {boolean} bool\n *   Whether to skip this operation.\n * @param {unknown} actual\n *   Actual value.\n * @param {unknown} expected\n *   Expected value.\n * @param {string} operator\n *   Operator.\n * @param {string} defaultMessage\n *   Default message for operation.\n * @param {Error | string | null | undefined} userMessage\n *   User-provided message.\n * @returns {asserts bool}\n *   Nothing; throws when falsey.\n */\n// eslint-disable-next-line max-params\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\n  if (!bool) {\n    throw userMessage instanceof Error\n      ? userMessage\n      : new AssertionError(\n          userMessage || defaultMessage,\n          actual,\n          expected,\n          operator,\n          !userMessage\n        )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}